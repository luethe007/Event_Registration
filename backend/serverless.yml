service:
  name: registration-app

plugins:
  - serverless-webpack
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-aws-documentation

package:
  individually: true

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    REGISTRATION_TABLE: registration-${self:provider.stage}
    INDEX: eventId
    AUTH_0_DOMAIN: luetify.eu.auth0.com
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATION_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATION_TABLE}/index/${self:provider.environment.INDEX}
      
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Event Registration API
        description: Serverless application for event registration
    models:
      - name: RegistrationRequest
        contentType: application/json
        schema: ${file(models/RegistrationRequest.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRegistrations:
    handler: src/lambda/http/getRegistrations.handler
    events:
      - http:
          method: get
          path: registrations
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATION_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATION_TABLE}/index/${self:provider.environment.INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  Register:
    handler: src/lambda/http/register.handler
    events:
      - http:
          method: post
          path: registrations
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Register for an event'
            description: 'Register for an event'
            tags:
              - Registration
            requestModels:
              'application/json': RegistrationRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATION_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource:
          - '*'

  DeleteRegistration:
    handler: src/lambda/http/deleteRegistration.handler
    events:
      - http:
          method: delete
          path: registrations/{eventId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATION_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RegistrationDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: eventId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REGISTRATION_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: eventId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
